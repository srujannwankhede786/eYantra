// Generated by gencpp from file survey_and_rescue/SRDroneStats.msg
// DO NOT EDIT!


#ifndef SURVEY_AND_RESCUE_MESSAGE_SRDRONESTATS_H
#define SURVEY_AND_RESCUE_MESSAGE_SRDRONESTATS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <survey_and_rescue/SRBeaconStats.h>
#include <survey_and_rescue/SRBeaconStats.h>
#include <survey_and_rescue/SRBeaconStats.h>
#include <survey_and_rescue/SRBeaconStats.h>

namespace survey_and_rescue
{
template <class ContainerAllocator>
struct SRDroneStats_
{
  typedef SRDroneStats_<ContainerAllocator> Type;

  SRDroneStats_()
    : foodOnboard(0)
    , medOnboard(0)
    , foodDistributed(0)
    , medDistributed(0)
    , rescues(0)
    , incorrectDetections(0)
    , correctDetections(0)
    , redundantDetections(0)
    , correctServices(0)
    , incorrectServices(0)
    , failedServices(0)
    , score(0)
    , currentDetected()
    , totalSucessServiced()
    , currentLit()
    , decisionEvents()  {
    }
  SRDroneStats_(const ContainerAllocator& _alloc)
    : foodOnboard(0)
    , medOnboard(0)
    , foodDistributed(0)
    , medDistributed(0)
    , rescues(0)
    , incorrectDetections(0)
    , correctDetections(0)
    , redundantDetections(0)
    , correctServices(0)
    , incorrectServices(0)
    , failedServices(0)
    , score(0)
    , currentDetected(_alloc)
    , totalSucessServiced(_alloc)
    , currentLit(_alloc)
    , decisionEvents(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _foodOnboard_type;
  _foodOnboard_type foodOnboard;

   typedef uint8_t _medOnboard_type;
  _medOnboard_type medOnboard;

   typedef uint8_t _foodDistributed_type;
  _foodDistributed_type foodDistributed;

   typedef uint8_t _medDistributed_type;
  _medDistributed_type medDistributed;

   typedef uint8_t _rescues_type;
  _rescues_type rescues;

   typedef uint8_t _incorrectDetections_type;
  _incorrectDetections_type incorrectDetections;

   typedef uint8_t _correctDetections_type;
  _correctDetections_type correctDetections;

   typedef uint8_t _redundantDetections_type;
  _redundantDetections_type redundantDetections;

   typedef uint8_t _correctServices_type;
  _correctServices_type correctServices;

   typedef uint8_t _incorrectServices_type;
  _incorrectServices_type incorrectServices;

   typedef uint8_t _failedServices_type;
  _failedServices_type failedServices;

   typedef int16_t _score_type;
  _score_type score;

   typedef  ::survey_and_rescue::SRBeaconStats_<ContainerAllocator>  _currentDetected_type;
  _currentDetected_type currentDetected;

   typedef  ::survey_and_rescue::SRBeaconStats_<ContainerAllocator>  _totalSucessServiced_type;
  _totalSucessServiced_type totalSucessServiced;

   typedef  ::survey_and_rescue::SRBeaconStats_<ContainerAllocator>  _currentLit_type;
  _currentLit_type currentLit;

   typedef  ::survey_and_rescue::SRBeaconStats_<ContainerAllocator>  _decisionEvents_type;
  _decisionEvents_type decisionEvents;





  typedef boost::shared_ptr< ::survey_and_rescue::SRDroneStats_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::survey_and_rescue::SRDroneStats_<ContainerAllocator> const> ConstPtr;

}; // struct SRDroneStats_

typedef ::survey_and_rescue::SRDroneStats_<std::allocator<void> > SRDroneStats;

typedef boost::shared_ptr< ::survey_and_rescue::SRDroneStats > SRDroneStatsPtr;
typedef boost::shared_ptr< ::survey_and_rescue::SRDroneStats const> SRDroneStatsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::survey_and_rescue::SRDroneStats_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::survey_and_rescue::SRDroneStats_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace survey_and_rescue

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'survey_and_rescue': ['/home/itachi/catkin_ws/src/survey_and_rescue/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::survey_and_rescue::SRDroneStats_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::survey_and_rescue::SRDroneStats_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::survey_and_rescue::SRDroneStats_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::survey_and_rescue::SRDroneStats_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::survey_and_rescue::SRDroneStats_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::survey_and_rescue::SRDroneStats_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::survey_and_rescue::SRDroneStats_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b187ed9321d4be8456a34e0ba5724a84";
  }

  static const char* value(const ::survey_and_rescue::SRDroneStats_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb187ed9321d4be84ULL;
  static const uint64_t static_value2 = 0x56a34e0ba5724a84ULL;
};

template<class ContainerAllocator>
struct DataType< ::survey_and_rescue::SRDroneStats_<ContainerAllocator> >
{
  static const char* value()
  {
    return "survey_and_rescue/SRDroneStats";
  }

  static const char* value(const ::survey_and_rescue::SRDroneStats_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::survey_and_rescue::SRDroneStats_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 foodOnboard\n\
uint8 medOnboard\n\
uint8 foodDistributed\n\
uint8 medDistributed\n\
uint8 rescues\n\
uint8 incorrectDetections\n\
uint8 correctDetections\n\
uint8 redundantDetections\n\
uint8 correctServices\n\
uint8 incorrectServices\n\
uint8 failedServices\n\
int16 score\n\
SRBeaconStats currentDetected\n\
SRBeaconStats totalSucessServiced\n\
SRBeaconStats currentLit\n\
SRBeaconStats decisionEvents\n\
\n\
================================================================================\n\
MSG: survey_and_rescue/SRBeaconStats\n\
uint8[] FOOD\n\
uint8[] MEDICINE\n\
uint8[] RESCUE\n\
";
  }

  static const char* value(const ::survey_and_rescue::SRDroneStats_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::survey_and_rescue::SRDroneStats_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.foodOnboard);
      stream.next(m.medOnboard);
      stream.next(m.foodDistributed);
      stream.next(m.medDistributed);
      stream.next(m.rescues);
      stream.next(m.incorrectDetections);
      stream.next(m.correctDetections);
      stream.next(m.redundantDetections);
      stream.next(m.correctServices);
      stream.next(m.incorrectServices);
      stream.next(m.failedServices);
      stream.next(m.score);
      stream.next(m.currentDetected);
      stream.next(m.totalSucessServiced);
      stream.next(m.currentLit);
      stream.next(m.decisionEvents);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SRDroneStats_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::survey_and_rescue::SRDroneStats_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::survey_and_rescue::SRDroneStats_<ContainerAllocator>& v)
  {
    s << indent << "foodOnboard: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.foodOnboard);
    s << indent << "medOnboard: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.medOnboard);
    s << indent << "foodDistributed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.foodDistributed);
    s << indent << "medDistributed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.medDistributed);
    s << indent << "rescues: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rescues);
    s << indent << "incorrectDetections: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.incorrectDetections);
    s << indent << "correctDetections: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.correctDetections);
    s << indent << "redundantDetections: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.redundantDetections);
    s << indent << "correctServices: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.correctServices);
    s << indent << "incorrectServices: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.incorrectServices);
    s << indent << "failedServices: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.failedServices);
    s << indent << "score: ";
    Printer<int16_t>::stream(s, indent + "  ", v.score);
    s << indent << "currentDetected: ";
    s << std::endl;
    Printer< ::survey_and_rescue::SRBeaconStats_<ContainerAllocator> >::stream(s, indent + "  ", v.currentDetected);
    s << indent << "totalSucessServiced: ";
    s << std::endl;
    Printer< ::survey_and_rescue::SRBeaconStats_<ContainerAllocator> >::stream(s, indent + "  ", v.totalSucessServiced);
    s << indent << "currentLit: ";
    s << std::endl;
    Printer< ::survey_and_rescue::SRBeaconStats_<ContainerAllocator> >::stream(s, indent + "  ", v.currentLit);
    s << indent << "decisionEvents: ";
    s << std::endl;
    Printer< ::survey_and_rescue::SRBeaconStats_<ContainerAllocator> >::stream(s, indent + "  ", v.decisionEvents);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SURVEY_AND_RESCUE_MESSAGE_SRDRONESTATS_H
