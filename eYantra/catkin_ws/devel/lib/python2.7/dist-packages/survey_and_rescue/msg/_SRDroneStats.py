# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from survey_and_rescue/SRDroneStats.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import survey_and_rescue.msg

class SRDroneStats(genpy.Message):
  _md5sum = "b187ed9321d4be8456a34e0ba5724a84"
  _type = "survey_and_rescue/SRDroneStats"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 foodOnboard
uint8 medOnboard
uint8 foodDistributed
uint8 medDistributed
uint8 rescues
uint8 incorrectDetections
uint8 correctDetections
uint8 redundantDetections
uint8 correctServices
uint8 incorrectServices
uint8 failedServices
int16 score
SRBeaconStats currentDetected
SRBeaconStats totalSucessServiced
SRBeaconStats currentLit
SRBeaconStats decisionEvents

================================================================================
MSG: survey_and_rescue/SRBeaconStats
uint8[] FOOD
uint8[] MEDICINE
uint8[] RESCUE
"""
  __slots__ = ['foodOnboard','medOnboard','foodDistributed','medDistributed','rescues','incorrectDetections','correctDetections','redundantDetections','correctServices','incorrectServices','failedServices','score','currentDetected','totalSucessServiced','currentLit','decisionEvents']
  _slot_types = ['uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','int16','survey_and_rescue/SRBeaconStats','survey_and_rescue/SRBeaconStats','survey_and_rescue/SRBeaconStats','survey_and_rescue/SRBeaconStats']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       foodOnboard,medOnboard,foodDistributed,medDistributed,rescues,incorrectDetections,correctDetections,redundantDetections,correctServices,incorrectServices,failedServices,score,currentDetected,totalSucessServiced,currentLit,decisionEvents

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SRDroneStats, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.foodOnboard is None:
        self.foodOnboard = 0
      if self.medOnboard is None:
        self.medOnboard = 0
      if self.foodDistributed is None:
        self.foodDistributed = 0
      if self.medDistributed is None:
        self.medDistributed = 0
      if self.rescues is None:
        self.rescues = 0
      if self.incorrectDetections is None:
        self.incorrectDetections = 0
      if self.correctDetections is None:
        self.correctDetections = 0
      if self.redundantDetections is None:
        self.redundantDetections = 0
      if self.correctServices is None:
        self.correctServices = 0
      if self.incorrectServices is None:
        self.incorrectServices = 0
      if self.failedServices is None:
        self.failedServices = 0
      if self.score is None:
        self.score = 0
      if self.currentDetected is None:
        self.currentDetected = survey_and_rescue.msg.SRBeaconStats()
      if self.totalSucessServiced is None:
        self.totalSucessServiced = survey_and_rescue.msg.SRBeaconStats()
      if self.currentLit is None:
        self.currentLit = survey_and_rescue.msg.SRBeaconStats()
      if self.decisionEvents is None:
        self.decisionEvents = survey_and_rescue.msg.SRBeaconStats()
    else:
      self.foodOnboard = 0
      self.medOnboard = 0
      self.foodDistributed = 0
      self.medDistributed = 0
      self.rescues = 0
      self.incorrectDetections = 0
      self.correctDetections = 0
      self.redundantDetections = 0
      self.correctServices = 0
      self.incorrectServices = 0
      self.failedServices = 0
      self.score = 0
      self.currentDetected = survey_and_rescue.msg.SRBeaconStats()
      self.totalSucessServiced = survey_and_rescue.msg.SRBeaconStats()
      self.currentLit = survey_and_rescue.msg.SRBeaconStats()
      self.decisionEvents = survey_and_rescue.msg.SRBeaconStats()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_11Bh().pack(_x.foodOnboard, _x.medOnboard, _x.foodDistributed, _x.medDistributed, _x.rescues, _x.incorrectDetections, _x.correctDetections, _x.redundantDetections, _x.correctServices, _x.incorrectServices, _x.failedServices, _x.score))
      _x = self.currentDetected.FOOD
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.currentDetected.MEDICINE
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.currentDetected.RESCUE
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.totalSucessServiced.FOOD
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.totalSucessServiced.MEDICINE
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.totalSucessServiced.RESCUE
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.currentLit.FOOD
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.currentLit.MEDICINE
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.currentLit.RESCUE
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.decisionEvents.FOOD
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.decisionEvents.MEDICINE
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.decisionEvents.RESCUE
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.currentDetected is None:
        self.currentDetected = survey_and_rescue.msg.SRBeaconStats()
      if self.totalSucessServiced is None:
        self.totalSucessServiced = survey_and_rescue.msg.SRBeaconStats()
      if self.currentLit is None:
        self.currentLit = survey_and_rescue.msg.SRBeaconStats()
      if self.decisionEvents is None:
        self.decisionEvents = survey_and_rescue.msg.SRBeaconStats()
      end = 0
      _x = self
      start = end
      end += 13
      (_x.foodOnboard, _x.medOnboard, _x.foodDistributed, _x.medDistributed, _x.rescues, _x.incorrectDetections, _x.correctDetections, _x.redundantDetections, _x.correctServices, _x.incorrectServices, _x.failedServices, _x.score,) = _get_struct_11Bh().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.currentDetected.FOOD = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.currentDetected.MEDICINE = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.currentDetected.RESCUE = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.totalSucessServiced.FOOD = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.totalSucessServiced.MEDICINE = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.totalSucessServiced.RESCUE = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.currentLit.FOOD = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.currentLit.MEDICINE = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.currentLit.RESCUE = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.decisionEvents.FOOD = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.decisionEvents.MEDICINE = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.decisionEvents.RESCUE = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_11Bh().pack(_x.foodOnboard, _x.medOnboard, _x.foodDistributed, _x.medDistributed, _x.rescues, _x.incorrectDetections, _x.correctDetections, _x.redundantDetections, _x.correctServices, _x.incorrectServices, _x.failedServices, _x.score))
      _x = self.currentDetected.FOOD
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.currentDetected.MEDICINE
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.currentDetected.RESCUE
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.totalSucessServiced.FOOD
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.totalSucessServiced.MEDICINE
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.totalSucessServiced.RESCUE
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.currentLit.FOOD
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.currentLit.MEDICINE
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.currentLit.RESCUE
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.decisionEvents.FOOD
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.decisionEvents.MEDICINE
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.decisionEvents.RESCUE
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.currentDetected is None:
        self.currentDetected = survey_and_rescue.msg.SRBeaconStats()
      if self.totalSucessServiced is None:
        self.totalSucessServiced = survey_and_rescue.msg.SRBeaconStats()
      if self.currentLit is None:
        self.currentLit = survey_and_rescue.msg.SRBeaconStats()
      if self.decisionEvents is None:
        self.decisionEvents = survey_and_rescue.msg.SRBeaconStats()
      end = 0
      _x = self
      start = end
      end += 13
      (_x.foodOnboard, _x.medOnboard, _x.foodDistributed, _x.medDistributed, _x.rescues, _x.incorrectDetections, _x.correctDetections, _x.redundantDetections, _x.correctServices, _x.incorrectServices, _x.failedServices, _x.score,) = _get_struct_11Bh().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.currentDetected.FOOD = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.currentDetected.MEDICINE = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.currentDetected.RESCUE = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.totalSucessServiced.FOOD = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.totalSucessServiced.MEDICINE = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.totalSucessServiced.RESCUE = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.currentLit.FOOD = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.currentLit.MEDICINE = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.currentLit.RESCUE = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.decisionEvents.FOOD = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.decisionEvents.MEDICINE = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.decisionEvents.RESCUE = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_11Bh = None
def _get_struct_11Bh():
    global _struct_11Bh
    if _struct_11Bh is None:
        _struct_11Bh = struct.Struct("<11Bh")
    return _struct_11Bh
